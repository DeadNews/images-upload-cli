[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry]
name = "images-upload-cli"
version = "0.0.0"
description = "Upload images via APIs"
authors = ["DeadNews <deadnewsgit@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/DeadNews/images-upload-cli"
repository = "https://github.com/DeadNews/images-upload-cli"
documentation = "https://deadnews.github.io/images-upload-cli"
keywords = ["cli", "imgur", "image-upload", "upload-images", "upload-pictures"]
classifiers = ["Environment :: Console", "Operating System :: OS Independent"]

[tool.poetry.scripts]
images-upload-cli = "images_upload_cli._cli:cli"

[tool.poetry.dependencies]
python = "^3.10"
click = "^8.1.7"
httpx = "^0.28.0"
loguru = "^0.7.2"
pillow = "^11.0.0"
pyperclip = "^1.9.0"
python-dotenv = "^1.0.1"
rich = "^14.0.0"

[tool.poetry.group.lint.dependencies]
mypy = "^1.15.0"
poethepoet = "^0.33.1"
pyright = "^1.1.398"
ruff = "^0.11.2"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
pytest-asyncio = "^0.26.0"
pytest-benchmark = "^5.1.0"
pytest-cov = "^6.0.0"
pytest-httpx = "^0.35.0"
pytest-mock = "^3.14.0"
logot = "^1.3.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocs-click = "^0.8.1"
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.2"
mkdocs-material = "^9.6.10"
mkdocstrings = "^0.29.1"
mkdocstrings-python = "^1.16.8"

[tool.poetry.group.build.dependencies]
nuitka = { version = "^2.6.9", platform = "win32" }

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"

[tool.poe.tasks]
mypy = "mypy ."
pyright = "pyright ."
ruff = "ruff check ."
ruff-fmt = "ruff format ."
lint.sequence = ["ruff", "ruff-fmt", "mypy", "pyright"]

[tool.poe.tasks.nuitka]
cmd = """
python -m nuitka
  --assume-yes-for-downloads
  --onefile
  --output-dir=dist
  --output-file=${outfile}
  --script-name=src/images_upload_cli/__main__.py
"""

[tool.poe.tasks.nuitka.args.outfile]
options = ["--output-file"]
default = "images-upload-cli.exe"
help = "Output file name."

[tool.poe.tasks.test]
cmd = "pytest -m 'not (online or benchmark)'"

[tool.poe.tasks.benchmark]
cmd = "pytest -m 'benchmark and not online' --benchmark-autosave --benchmark-compare"

[tool.poe.tasks.benchmark-online]
cmd = "pytest -m 'benchmark and online' --benchmark-autosave --benchmark-compare"

[tool.pytest.ini_options]
addopts = "--verbose --cov=./src --cov-report=term --cov-report=xml"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
markers = [
  "benchmark: Run benchmarks",
  "online: Run tests that require internet connection",
]

[tool.coverage.report]
exclude_lines = [
  "# pragma: no cover",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
disallow_untyped_defs = true
follow_imports = "normal"
ignore_missing_imports = true
show_column_numbers = true
show_error_codes = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false

[tool.pyright]
include = ["src"]
ignore = ["tests"]
typeCheckingMode = "standard"

[tool.ruff]
line-length = 99
target-version = "py310" # Until Poetry v2

[tool.ruff.format]
line-ending = "lf"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "COM812",  # Trailing comma missing
  "FBT001",  # Boolean positional arg in function definition
  "FBT002",  # Boolean default value in function definition
  "ISC001",  # Checks for implicitly concatenated strings on a single line
  "PLR0913", # Too many arguments to function call
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["ANN", "D", "E501", "PLC1901", "PLR2004", "S"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pycodestyle]
max-doc-length = 129
max-line-length = 129

[tool.ruff.lint.pydocstyle]
convention = "google"
