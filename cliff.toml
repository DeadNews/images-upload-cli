# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
header = """
# Changelog\n
"""
postprocessors = [
  { pattern = '<REPO>', replace = "https://github.com/deadnews/images-upload-cli" },
]
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% macro print_commit(commit) -%}
    - {% if commit.scope %}_({{ commit.scope }})_ {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message }} - \
        ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]\
          ({{ self::remote_url() }}/compare/{{ previous.version }}...{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}]\
          ({{ self::remote_url() }}/commits/{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor %}\n
"""
footer = """
<!-- generated by git-cliff -->
"""
trim = true

[git]
conventional_commits = true # parse the commits based on https://www.conventionalcommits.org
filter_unconventional = true # filter out the commits that are not conventional
split_commits = false # process each line of a commit as an individual commit
commit_preprocessors = [
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" }, # Replace issue numbers
  { pattern = "  +", replace = " " },                                               # Remove multiple whitespaces
]
commit_parsers = [
  { message = "^(ci|build|chore)\\(deps.*\\)", skip = true },
  { message = "^chore\\(release\\)", skip = true },
  { message = "^fix\\(deps.*\\)", group = "<!-- 92 -->⬆️ Dependencies" },
  { message = "^feat", group = "<!-- 0 -->🚀 Features" },
  { message = "^fix", group = "<!-- 1 -->🐛 Bug fixes" },
  { message = "^refactor", group = "<!-- 2 -->🚜 Refactor" },
  { message = "^doc", group = "<!-- 3 -->📚 Documentation" },
  { message = "^perf", group = "<!-- 4 -->⚡ Performance" },
  { message = "^style", group = "<!-- 5 -->🎨 Styling" },
  { message = "^test", group = "<!-- 6 -->🧪 Testing" },
  { message = "^chore", group = "<!-- 7 -->🧹 Chores" },
  { body = ".*security", group = "<!-- 8 -->🛡️ Security" },
  { message = "^build", group = "<!-- 9 -->👷 Build" },
  { message = "^ci", group = "<!-- 91 -->⚙️ CI/CD" },
  { message = "^revert", group = "<!-- 93 -->◀️ Revert" },
]
protect_breaking_commits = true
filter_commits = false # filter out the commits that are not matched by commit parsers
tag_pattern = "v[0-9].*" # regex for matching git tags
skip_tags = "" # drop commits from the changelog
ignore_tags = "rc|beta|alpha" # include ignored commits into the next tag
topo_order = false # sort the tags topologically
sort_commits = "newest" # sort the commits inside sections by oldest/newest order
